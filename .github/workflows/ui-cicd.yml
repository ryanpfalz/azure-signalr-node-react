name: UI CI/CD Workflow

on:
    push:
        branches:
            - "NA" # prevent action

env:
    NEGOTIATE_FUNCTION_FOLDER: "signalr_negotiatefunction"

jobs:
    # pass data to reusable workflow
    configuration:
        name: "Configuration"
        uses: ./.github/workflows/config.yml

    containerizeWebApp:
        name: "Containerize and Push Web App"

        needs: [configuration]
        runs-on: ubuntu-latest
        steps:
            # checkout the repo
            - name: "Checkout Repo"
              uses: actions/checkout@v2

            - name: "Login via Azure CLI"
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_SP_CREDENTIALS }}

            - name: "Get Negotiate Function Invoke URL"
              shell: pwsh
              run: |
                  $url = $(az functionapp function show --function-name ${{ env.NEGOTIATE_FUNCTION_FOLDER }} --name ${{ fromJson(needs.configuration.outputs.variables).functionName }} --resource-group ${{ fromJson(needs.configuration.outputs.variables).resourceGroup }} --query "invokeUrlTemplate" --output tsv)
                  echo "negotiateFunctionInvokeUrl=$url" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

            - name: Variable replacement
              uses: microsoft/variable-substitution@v1
              with:
                  files: "./ui/server/config/serverConfig.json"
              env:
                  negotiateFunctionUrl: ${{ env.negotiateFunctionInvokeUrl }}
              # Variable replacement end ##

            - name: "Registry Authentication"
              uses: azure/docker-login@v1
              with:
                  login-server: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io
                  username: ${{ secrets.REGISTRY_USERNAME }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            # build with cache
            - name: Set up Docker Buildx
              id: buildx
              # Use the action from the master, as we've seen some inconsistencies with @v1
              # Issue: https://github.com/docker/build-push-action/issues/286
              uses: docker/setup-buildx-action@master
              with:
                  install: true

            - name: Cache Docker layers
              uses: actions/cache@v2
              with:
                  path: /tmp/.buildx-cache
                  # Key is named differently to avoid collision
                  key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-multi-buildx

            - name: Build production image
              uses: docker/build-push-action@v3
              with:
                  context: ./ui/
                  builder: ${{ steps.buildx.outputs.name }}
                  file: ./ui/Dockerfile.prod
                  # Set the desired build target here
                  target: deploy
                  push: true
                  tags: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io/${{ fromJson(needs.configuration.outputs.variables).webAppContainerImageName }}:${{ github.sha }}
                  cache-from: type=local,src=/tmp/.buildx-cache
                  # Note the mode=max here
                  # More: https://github.com/moby/buildkit#--export-cache-options
                  # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
                  cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

            - name: Move cache
              run: |
                  rm -rf /tmp/.buildx-cache
                  mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # TODO add gate
    deployWebApp:
        name: "Deploy Web Container App"
        needs: [configuration, containerizeWebApp]
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout Repo"
              uses: actions/checkout@v2

            - name: "Login via Azure CLI"
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_SP_CREDENTIALS }}

            - name: "Deploy to Azure Container Instances"
              uses: "azure/aci-deploy@v1"
              with:
                  resource-group: ${{ fromJson(needs.configuration.outputs.variables).resourceGroup }}
                  dns-name-label: ${{ fromJson(needs.configuration.outputs.variables).resourceGroup }}${{ github.run_number }}
                  image: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io/${{ fromJson(needs.configuration.outputs.variables).webAppContainerImageName }}:${{ github.sha }}
                  registry-login-server: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io
                  registry-username: ${{ secrets.REGISTRY_USERNAME }}
                  registry-password: ${{ secrets.REGISTRY_PASSWORD }}
                  name: ${{ fromJson(needs.configuration.outputs.variables).webAppContainerInstanceName }}
                  location: ${{ fromJson(needs.configuration.outputs.variables).location }}

            # ACA IaC pwsh
            - name: "Deploy Container App"
              run: |
                  ./devops/scripts/ui/aca.ps1 ${{ fromJson(needs.configuration.outputs.variables).webAppContainerAppName }} ${{ fromJson(needs.configuration.outputs.variables).webAppContainerAppEnvName }} ${{ fromJson(needs.configuration.outputs.variables).webAppContainerImageName }} ${{ github.sha }}
              shell: pwsh
