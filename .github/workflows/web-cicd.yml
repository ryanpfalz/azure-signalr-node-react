name: UI CI/CD Workflow

on:
    push:
        branches:
            # - "NA" # prevent action
            - "dev"

env:
    NEGOTIATE_FUNCTION_FOLDER: "signalr_negotiatefunction"
    BROADCAST_FUNCTION_FOLDER: "signalr_broadcastfunction"

jobs:
    # pass data to reusable workflow
    configuration:
        name: "Configuration"
        uses: ./.github/workflows/config.yml

    containerizeWebApp:
        name: "Containerize and Push Web App"

        needs: [configuration]
        runs-on: ubuntu-latest
        steps:
            # checkout the repo
            - name: "Checkout Repo"
              uses: actions/checkout@v2

            - name: "Login via Azure CLI"
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_SP_CREDENTIALS }}

            - name: "Get Negotiate and Broadcast Function Invoke URL"
              shell: pwsh
              run: |
                  $negotiateUrl = $(az functionapp function show --function-name ${{ env.NEGOTIATE_FUNCTION_FOLDER }} --name ${{ fromJson(needs.configuration.outputs.variables).functionName }} --resource-group ${{ fromJson(needs.configuration.outputs.variables).resourceGroup }} --query "invokeUrlTemplate" --output tsv)
                  echo "negotiateFunctionInvokeUrl=$negotiateUrl" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
                  $broadcastUrl = $(az functionapp function show --function-name ${{ env.BROADCAST_FUNCTION_FOLDER }} --name ${{ fromJson(needs.configuration.outputs.variables).functionName }} --resource-group ${{ fromJson(needs.configuration.outputs.variables).resourceGroup }} --query "invokeUrlTemplate" --output tsv)
                  echo "broadcastFunctionInvokeUrl=$broadcastUrl" | Out-File -FilePath  $Env:GITHUB_ENV -Encoding utf8 -Append

            - name: Variable replacement
              uses: microsoft/variable-substitution@v1
              with:
                  files: "./web/client/src/util/Config.json, ./web/server/config/serverConfig.json"
              env:
                  buildNumber: ver-${{ github.run_number }}
                  negotiateFunctionUrl: ${{ env.negotiateFunctionInvokeUrl }}
                  broadcastFunctionUrl: ${{ env.broadcastFunctionInvokeUrl }}
              # Variable replacement end ##

            - name: "Registry Authentication"
              uses: azure/docker-login@v1
              with:
                  login-server: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io
                  username: ${{ secrets.REGISTRY_USERNAME }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            - name: Build production image
              uses: docker/build-push-action@v3
              with:
                  context: ./web/
                  # builder: ${{ steps.buildx.outputs.name }}
                  file: ./web/Dockerfile.prod
                  # Set the desired build target here
                  target: deploy
                  push: true
                  tags: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io/${{ fromJson(needs.configuration.outputs.variables).webAppContainerImageName }}:${{ github.sha }}

    deployWebApp:
        name: "Deploy Web Container App"
        needs: [configuration, containerizeWebApp]
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout Repo"
              uses: actions/checkout@v2

            - name: "Login via Azure CLI"
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_SP_CREDENTIALS }}

            - name: "Deploy to Azure Container Instances"
              uses: "azure/aci-deploy@v1"
              with:
                  resource-group: ${{ fromJson(needs.configuration.outputs.variables).resourceGroup }}
                  dns-name-label: ${{ fromJson(needs.configuration.outputs.variables).resourceGroup }}${{ github.run_number }}
                  image: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io/${{ fromJson(needs.configuration.outputs.variables).webAppContainerImageName }}:${{ github.sha }}
                  registry-login-server: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io
                  registry-username: ${{ secrets.REGISTRY_USERNAME }}
                  registry-password: ${{ secrets.REGISTRY_PASSWORD }}
                  name: ${{ fromJson(needs.configuration.outputs.variables).webAppContainerInstanceName }}
                  location: ${{ fromJson(needs.configuration.outputs.variables).location }}

            # ACA IaC pwsh with image built in pipeline
            - name: "Deploy Container App"
              run: |
                  ./devops/scripts/web/aca.ps1 ${{ fromJson(needs.configuration.outputs.variables).webAppContainerAppName }} ${{ fromJson(needs.configuration.outputs.variables).webAppContainerAppEnvName }} ${{ fromJson(needs.configuration.outputs.variables).webAppContainerImageName }} ${{ github.sha }} $False
              shell: pwsh
